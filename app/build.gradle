/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    
    // BCrypt for password hashing
    implementation 'org.mindrot:jbcrypt:0.4'
    
    // JSON processing for message serialization
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.8'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'ssh.server.SSHServer'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Custom tasks for running server and client
tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Run the SSH Server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ssh.server.SSHServer'
    workingDir = project.rootDir
    standardInput = System.in
    jvmArgs = ['-Xmx512m', '-Xms256m', '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200']
}

tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Run the SSH Client'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ssh.client.SSHClientMain'
    workingDir = project.rootDir
    standardInput = System.in
    jvmArgs = ['-Xmx256m', '-Xms128m', '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200']
}

// Custom task to create a fat JAR for the client
task clientJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ssh.client.SSHClientMain'
    }
    archiveBaseName = 'ssh-client'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}