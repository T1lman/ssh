/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Add the JavaFX plugin
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    
    // BCrypt for password hashing
    implementation 'org.mindrot:jbcrypt:0.4'
    
    // JSON processing for message serialization
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.8'
    
    // JavaFX dependencies
    implementation "org.openjfx:javafx-controls:${javafx.version}"
    implementation "org.openjfx:javafx-fxml:${javafx.version}"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configure console output to be plain by default
gradle.startParameter.consoleOutput = org.gradle.api.logging.configuration.ConsoleOutput.Plain

javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    // Define the main class for the application (default: GUI client)
    mainClass = 'ssh.client.SSHClientGuiMain'
}

tasks.named('run') {
    // This task will now run the GUI client by default
    workingDir = project.rootDir
}

tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Run the SSH Server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ssh.server.controller.SSHServer'
    workingDir = project.rootDir
    standardInput = System.in
    jvmArgs = ['-Xmx512m', '-Xms256m', '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200']
}

tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Run the SSH Client (Console)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ssh.client.SSHClientMain'
    workingDir = project.rootDir
    standardInput = System.in
    jvmArgs = ['-Xmx256m', '-Xms128m', '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200']
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    // Configure test logging
    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

// Custom task to create a fat JAR for the client
task clientJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ssh.client.SSHClientMain'
    }
    archiveBaseName = 'ssh-client'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Fat JAR for GUI client
task clientGuiJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ssh.client.SSHClientGuiMain'
    }
    archiveBaseName = 'ssh-client-gui'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Fat JAR for Console client
task clientConsoleJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ssh.client.SSHClientMain'
    }
    archiveBaseName = 'ssh-client-console'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Fat JAR for Server
task serverJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ssh.server.controller.SSHServer'
    }
    archiveBaseName = 'ssh-server'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}